{"version":3,"sources":["Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","props","className","text","aria-hidden","onClick","onSelect","id","App","useState","itemList","setItemList","Item","setItem","deleteItem","preValue","filter","array","index","type","placeholder","onChange","event","target","value","map","itemVal","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","onAddToHomescreenClick","alert","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6JAeeA,EAbF,SAACC,GACV,OACI,oCACA,yBAAKC,UAAU,QACf,4BAAKD,EAAME,MACX,uBAAGD,UAAU,cAAcE,cAAY,OAAOC,QAAS,WACnDJ,EAAMK,SAASL,EAAMM,UC6ClBC,EAjDH,WAAO,IAAD,EAEiBC,mBAAS,IAF1B,mBAERC,EAFQ,KAEEC,EAFF,OAGSF,mBAAS,IAHlB,mBAGRG,EAHQ,KAGFC,EAHE,KAgBRC,EAAa,SAACP,GAChBM,GAAQ,SAACE,GACL,OAAOA,EAASC,QAAO,SAACC,EAAOC,GAC3B,OAAOX,IAAKW,SAKxB,OACI,oCACA,yBAAKhB,UAAU,YACX,yBAAKA,UAAU,QACX,yCACA,6BACA,2BAAOiB,KAAK,OAAOC,YAAY,aAAaC,SAzBrC,SAACC,GAChBX,EAAYW,EAAMC,OAAOC,QAwBiDA,MAAOd,IACzE,uBAAGR,UAAU,aAAaE,cAAY,OAAOC,QAtBzC,WACZQ,GAAQ,SAACE,GACL,MAAM,GAAN,mBAAUA,GAAV,CAAoBL,OAExBC,EAAY,OAmBJ,4BACKC,EAAKa,KAAI,SAACC,EAAQR,GACf,OACI,kBAAC,EAAD,CAAMf,KAAMuB,EACRC,IAAKT,EACLX,GAAIW,EACJZ,SAAUQ,YC9BpCc,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oBCrFjEC,IAASC,OACP,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAiBC,uBAPc,WACjCC,MAAM,oCAQNC,SAASC,eAAe,SDMnB,SAAkBvB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,QAAwB/B,OAAOC,SAAS+B,MACpDC,SAAWjC,OAAOC,SAASgC,OAIvC,OAGFjC,OAAOkC,iBAAiB,QAAQ,WAC9B,IAAM7B,EAAK,UAAM0B,QAAN,sBAEPjC,IAgEV,SAAiCO,EAAOC,GAEtC6B,MAAM9B,EAAO,CACX+B,QAAS,CAAE,iBAAkB,YAE5B1B,MAAK,SAAA2B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMhC,MAAK,SAAAC,GACjCA,EAAagC,aAAajC,MAAK,WAC7BV,OAAOC,SAAS2C,eAKpBxC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA0B,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC5B/BE,I","file":"static/js/main.c9b9f7c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todo = (props) => {\r\n    return(\r\n        <>\r\n        <div className=\"list\">\r\n        <li>{props.text}</li>\r\n        <i className=\"fa fa-trash\" aria-hidden=\"true\" onClick={() => {\r\n            props.onSelect(props.id)\r\n        }}></i>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react';\nimport './index.css';\nimport Todo from './Todo';\n\nconst App = () => {\n\n    const[itemList, setItemList] = useState(\"\");\n    const[Item, setItem] = useState([]);\n\n    const inputEvent = (event) => {\n        setItemList(event.target.value);\n    }\n\n    const AddItem = () => {\n        setItem((preValue) => {\n            return[...preValue, itemList]\n        })\n        setItemList(\"\")\n    }\n\n    const deleteItem = (id) => {\n        setItem((preValue) => {\n            return preValue.filter((array, index) => {\n                return id!==index\n            })\n        })\n    }\n\n    return(\n        <>\n        <div className=\"main_div\">\n            <div className=\"todo\">\n                <h1>ToDo List</h1>\n                <br/>\n                <input type=\"text\" placeholder=\"Add a item\" onChange={inputEvent} value={itemList}/>\n                <i className=\"fa fa-plus\" aria-hidden=\"true\" onClick={AddItem}></i>\n                <ol>\n                    {Item.map((itemVal,index) => {\n                        return(\n                            <Todo text={itemVal}\n                                key={index}\n                                id={index}\n                                onSelect={deleteItem}\n                            />\n                        )\n                    })}\n                </ol>\n            </div>\n        </div>\n        </>\n    )\n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AddToHomescreen from 'react-add-to-homescreen';\n\nconst handleAddToHomescreenClick = () => {\n  alert('Add ToDo List To Home Screen');\n};\n\nReactDOM.render(\n  <>\n    <App />\n    <AddToHomescreen onAddToHomescreenClick={handleAddToHomescreenClick} />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}